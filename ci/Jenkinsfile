pipeline {
    agent any

    parameters {
        string(name: 'AWS_ACCESS_KEY', defaultValue: '', description: 'AWS access key.')
        string(name: 'AWS_SECRET_ACCESS_KEY', defaultValue: '', description: 'AWS secret access key.')
        booleanParam(name: 'SKIP_TESTS', defaultValue: false, description: 'Skip tests.')
        booleanParam(name: 'TEARDOWN', defaultValue: false, description: 'Tear down current infrastructure only.')
    }

    environment {
        AWS_ACCESS_KEY_ID = "${params.AWS_ACCESS_KEY}"
        AWS_SECRET_ACCESS_KEY = "${params.AWS_SECRET_ACCESS_KEY}"
        AWS_REGION = "eu-west-2"
    }

    stages {
        stage('TearDown') {
            when {
                expression {
                    params.TEARDOWN
                }
            }

            steps {
                dir('deploy') {
                    echo 'Tearing down current infrastructure...'
                    sh 'terraform destroy -auto-approve'
                }
            }
        }

        stage('Build') {
            when {
                expression {
                    !params.TEARDOWN
                }
            }

            steps {
                echo 'Building app...'
                sh 'npm i'
            }
        }

        stage('Run Local Tests') {
            when {
                expression {
                    !params.SKIP_TESTS && !params.TEARDOWN
                }
            }

            steps {
                echo 'Running unit tests...'
                sh 'npm test'
            }
        }

        stage('Terraform Deploy') {
            when {
                expression {
                    !params.TEARDOWN
                }
            }   

            steps {
                echo 'Deploying app to AWS...'
                dir('deploy') {
                    sh 'terraform init'
                    sh 'terraform apply -auto-approve'
                    sh 'terraform output > ../ci/buildOutputs.txt'
                    sh 'rm -rf ec2key.pem'
                }
            }
        }

        stage('Health Check') {
            when {
                expression {
                    !params.TEARDOWN
                }
            }

            steps {
                echo 'Checking service availability...'
                dir('ci') {
                    sh 'chmod +x healthCheck.sh'
                    sh './healthCheck.sh'
                }
            }
        }
    }
}
